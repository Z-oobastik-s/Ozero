import { NextApiRequest, NextApiResponse } from 'next';
import fetch from 'node-fetch';

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram –∏ ID —á–∞—Ç–∞
const TELEGRAM_BOT_TOKEN = '6578981613:AAGAQIS_-PEkRRxum0sR6guPN8jmRuE21pM';
const TELEGRAM_CHAT_ID = '@ozerovaco'; // ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è

// –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞–∑–≤–∞–Ω–∏–π —É—Å–ª—É–≥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
const serviceTranslations: Record<string, string> = {
  'fishing': '–†—ã–±–∞–ª–∫–∞',
  'accommodation': '–û—Ç–¥—ã—Ö –≤ –¥–æ–º–∏–∫–µ',
  'gazebo': '–ë–µ—Å–µ–¥–∫–∞',
  'cafe': '–ö–∞—Ñ–µ'
};

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏–∑ YYYY-MM-DD –≤ DD.MM.YYYY
const formatDate = (dateString: string): string => {
  const [year, month, day] = dateString.split('-');
  return `${day}.${month}.${year}`;
};

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // –¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const { name, phone, date, service, persons, comments } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!name || !phone || !date) {
      return res.status(400).json({ message: 'Missing required fields' });
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const formattedDate = formatDate(date);
    const serviceName = serviceTranslations[service] || service;

    let message = `üîî <b>–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ–∑–µ—Ä–µ –ú–∏—Ö–∞–π–ª—ã–Ω–∞</b>\n\n`;
    message += `üë§ <b>–ò–º—è:</b> ${name}\n`;
    message += `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}\n`;
    message += `üìÖ <b>–î–∞—Ç–∞:</b> ${formattedDate}\n`;
    message += `üß© <b>–£—Å–ª—É–≥–∞:</b> ${serviceName}\n`;
    message += `üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:</b> ${persons}\n`;
    
    if (comments) {
      message += `\nüìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b> ${comments}\n`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHAT_ID,
          text: message,
          parse_mode: 'HTML',
        }),
      }
    );

    const telegramData = await telegramResponse.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    if (!telegramData.ok) {
      console.error('Telegram error:', telegramData);
      return res.status(500).json({ message: 'Failed to send message to Telegram' });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return res.status(200).json({ message: 'Booking request sent successfully' });
  } catch (error) {
    console.error('Error sending booking request:', error);
    return res.status(500).json({ message: 'Internal server error' });
  }
} 